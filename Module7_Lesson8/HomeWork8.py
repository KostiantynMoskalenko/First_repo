'''
Підсумкове завдання модуля два було на обчислення арифметичного виразу. У задачі на повторення ми підемо трохи іншим 
шляхом і виконаємо схоже завдання, одночасно закріпивши знання роботи зі рядками та списками. Розбиття рядка на лексеми 
є процес перетворення вихідного рядка в список з підрядків, званих лексемами (token).

В арифметичному виразі лексемами є: оператори, числа та дужки. Операторами у нас будуть такі символи: *, /, - та +. 
Оператори та дужки легко виділити у рядку — вони складаються з одного символу і ніколи не є частиною інших лексем. 
Числа виділити складніше, оскільки ці лексеми можуть складатися з кількох символів. Тому будь-яка безперервна 
послідовність цифр — це одна числова лексема.

Напишіть функцію, яка приймає параметр рядок, що містить математичний вираз, і перетворює його в список лексем. 
Кожна лексема має бути або оператором, або числом, або дужкою.

Приклад:

"2+ 34-5 * 3" => ['2', '+', '34', '-', '5', '*', '3']
З метою спрощення вважаємо, що числа можуть бути тільки цілими, і вхідний рядок завжди міститиме математичний вираз, 
що складається з дужок, чисел та операторів.

Зверніть увагу, що лексеми можуть відокремлюватися один від одного різною кількістю прогалин, а можуть і не 
відокремлюватися зовсім. Прогалини не є лексемами та до підсумкового списку потрапити не повинні.
'''

def token_parser(s):
    result = []
    digit = 0
    i = 0
    for char in s:
        if char.isdigit():
            if i == 0:
                digit = int(char)
                i = 1
            else:
                digit = int(char) + digit * 10**i 
                i = i + 1
        elif char == '+' or char == '-' or char == '*' or char == '/' or char == '(' or char == ')':
            if i >= 1:
                result.append(str(digit))
                i = 0
            result.append(char)
    if i >= 1:
        result.append(str(digit))
    return(result)

s = ''
print(token_parser(s))